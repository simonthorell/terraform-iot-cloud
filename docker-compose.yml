services:
  terraform:
    container_name: terraform
    build:
      context: ./terraform
      dockerfile: Dockerfile
    environment:
      - TF_VAR_aws_account_id=${AWS_ACCOUNT_ID}
      - TF_VAR_aws_region=${AWS_DEFAULT_REGION}
      - TF_VAR_aws_access_key_id=${AWS_ACCESS_KEY_ID}
      - TF_VAR_aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - .:/workspace
    working_dir: /workspace/terraform # Path to Terraform files
    entrypoint: ["/workspace/terraform/entrypoint.sh"]

  localstack:
    container_name: localstack
    image: localstack/localstack
    environment:
      - SERVICES=iot,dynamodb,amplify # Mocked AWS services
      - DEFAULT_REGION=${AWS_DEFAULT_REGION}
    ports:
      - "4566:4566" # LocalStack gateway for AWS CLI & SDKs
      - "4567:4567" # LocalStack S3

  build-frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend/dist:/app/dist
    command: > # Zip Nuxt3 SSR build for AWS Deployment
      sh -c "
      mkdir -p /app/dist && \
      zip -r /app/dist/nuxt3-csr-build.zip .output/public"

  build-api:
    container_name: api
    build:
      context: .
      dockerfile: ./api/Dockerfile
    volumes:
      - ./api/dist:/dist

  iot-client:
    container_name: iot-client
    build:
      context: .
      dockerfile: ./iot-device/virtual-device/Dockerfile
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./certs/root_ca.pem:/certs/root_ca.pem
      - ./certs/iot_cert.pem:/certs/iot_cert.pem
      - ./certs/iot_private_key.pem:/certs/iot_private_key.pem
      - ./certs/iot_endpoint.txt:/certs/iot_endpoint.txt

  esp32-rust:
    image: espressif/idf-rust:esp32c3_latest
    container_name: esp32_rust_dev
    working_dir: /workspace
    volumes:
      - ./iot-device/esp-template:/workspace
      - ./certs:/workspace/certs
    stdin_open: true
    tty: true
    command: sh
    # Open shell with: docker exec -it esp32_rust_dev bash
